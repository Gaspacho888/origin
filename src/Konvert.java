import java.util.TreeMap;

public class Konvert {
    TreeMap<Character, Integer> romeKeyMap = new TreeMap<>();
    // Создает новый объект TreeMap с ключами типа Character и значениями типа Integer
    // и присваивает его переменной romeKeyMap.
    TreeMap<Integer, String> arabKeyMap = new TreeMap<>();
    // Создает новый объект TreeMap с ключами типа Integer и значениями типа String
    // и присваивает его переменной arabKeyMap.

    public Konvert() {
        romeKeyMap.put('I', 1);
        romeKeyMap.put('V', 5);
        romeKeyMap.put('X', 10);
        romeKeyMap.put('L', 50);
        romeKeyMap.put('C', 100);

        arabKeyMap.put(1, "I");
        arabKeyMap.put(5, "V");
        arabKeyMap.put(10, "X");
        arabKeyMap.put(50, "L");
        arabKeyMap.put(100, "C");
        // Добавляет пару ключ-значение в TreeMap romeKeyMap. Ключом является символ 'I',
        // а значением - число 1. Эта строка кода устанавливает соответствие между символом римской цифры 'I'
        // и ее числовым значением 1 в romeKeyMap. romeKeyMap используется для хранения соответствия символов
        // римских цифр и их числовых значений.

    }

    public boolean isRoman(String num) {
        for (int i = 0; i < num.length(); i++) {
            if (!romeKeyMap.containsKey(num.charAt(i))) {
                //// Действия, которые нужно выполнить, если ключ не содержится в romeKeyMap
                return false;
            }
        }
        return true;
        // Цикл for используется для итерации по символам в строке number.
        // Условие i < number.length() гарантирует, что цикл будет выполняться для каждого индекса символа в строке number.
        // Внутри цикла, проверяется, содержит ли romeKeyMap ключ, соответствующий текущему символу в строке number.
        // Это делается с помощью метода containsKey().
        // Если ключ не содержится в romeKeyMap, то условие !romeKeyMap.containsKey(number.charAt(i)) будет истинным
    }

    public String intToRoman(int num) {
        String roman = "";
        // Объявляет переменную roman типа String и присваивает ей пустую строку.
        // Переменная roman используется в методе intToRoman(int num) для построения строки,
        // представляющей римское число, соответствующее заданному числу num.
        int arabKey;
        // Объявляет переменную arabKey типа int.

        do {
            arabKey = arabKeyMap.floorKey(num);
            // Используется для получения наибольшего ключа в arabKeyMap
            roman += arabKeyMap.get(arabKey); // += используется для конкатенации соединения строк.
            // Используется для добавления значения, полученного из arabKeyMap по ключу arabKey, к переменной roman.
            num -= arabKey; // Оператор -= является сокращенной формой записи операции вычитания и присваивания.
            // Значение arabKey вычитается из текущего значения переменной number,
            // и результат присваивается обратно переменной number.

            // Используется для вычитания значения arabKey из переменной number.

        } while (num != 0);
        // Используется для продолжения выполнения кода внутри цикла до тех пор,
        // пока значение переменной number не станет равным 0.
        return roman;
        // Используется для возврата значения переменной roman из метода intToRoman(int num).
    }

    public int romanToInt(String str) {
        int end = str.length() - 1; // Используется для определения индекса последнего символа в строке str
        // str.length() возвращает длину строки str, то есть количество символов в ней.
        // Вычитание 1 от результата str.length() гарантирует получение индекса последнего символа в строке,
        // так как индексы в строке начинаются с 0.
        // Например, если str содержит строку "IV", то str.length() вернет значение 2.
        // Вычитание 1 от этого значения даст индекс последнего символа, который равен 1.
        char[] array = str.toCharArray(); // Используется для преобразования строки str в массив символов (char[]).
        // Метод toCharArray() вызывается на строке str и возвращает новый массив символов,
        // содержащий все символы из строки str. Этот массив символов присваивается переменной array.
        // После выполнения этой строки кода, переменная array будет содержать массив символов,
        // где каждый элемент массива будет представлять отдельный символ из строки str.
        int arab;
        int result = romeKeyMap.get(array[end]);
        // Используется для получения числового значения, соответствующего последнему символу в массиве
        // символов array, с использованием romeKeyMap.
        // Метод get() вызывается на romeKeyMap с аргументом array[end], чтобы получить числовое значение,
        // соответствующее символу array[end]. Затем это значение присваивается переменной result.
        for (int i = end - 1; i >= 0; i--) { // цикл for будет выполняться, начиная с предпоследнего символа
            // и до первого символа в массиве array, обрабатывая каждый символ в обратном порядке
            arab = romeKeyMap.get(array[i]);
            // Переменная arab будет содержать числовое значение, соответствующее текущему символу array[i]
            if (arab < romeKeyMap.get(array[i + 1])) { // Проверяет, является ли числовое значение arab,
                // соответствующее текущему символу array[i], меньше числового значения, соответствующего следующему
                // символу array[i + 1] в romeKeyMap.
                result -= arab;
                // Значение arab вычитается из переменной result
            } else {
                result += arab;
                // Значение arab прибавляется к переменной result.
            }
        }
        return result;
    } // Используется для преобразования римского числа, представленного в виде строки str, в целочисленное значение.
}
